%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 284 244
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Tuesday, January 23, 2018 11:21:03 PM CET
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
284 244 setpagesize
0 0 0 0 setmargins
0 0 setorigin
284 244 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
284.000 0.00000 l
284.000 244.000 l
0.00000 244.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
284.000 0.00000 l
284.000 244.000 l
0.00000 244.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 284 244 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -589.000 -335.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
589.000 335.000 m
873.000 335.000 l
873.000 579.000 l
589.000 579.000 l
589.000 335.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -589.000 -335.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -589.000 -335.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -589.000 -335.000 ] defaultmatrix matrix concatmatrix setmatrix
q
1.00000 1.00000 1.00000 RG
newpath
733.463 407.500 m
733.463 407.500 l
733.463 428.763 750.700 446.000 771.963 446.000  c
771.963 446.000 l
793.226 446.000 810.463 428.763 810.463 407.500  c
810.463 407.500 l
810.463 386.237 793.226 369.000 771.963 369.000  c
771.963 369.000 l
750.700 369.000 733.463 386.237 733.463 407.500  c
h
f
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
733.463 407.500 m
733.463 407.500 l
733.463 428.763 750.700 446.000 771.963 446.000  c
771.963 446.000 l
793.226 446.000 810.463 428.763 810.463 407.500  c
810.463 407.500 l
810.463 386.237 793.226 369.000 771.963 369.000  c
771.963 369.000 l
750.700 369.000 733.463 386.237 733.463 407.500  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
749.462 402.904 m
750.650 402.904 l
752.494 410.295 l
754.322 402.904 l
755.650 402.904 l
757.494 410.295 l
759.322 402.904 l
760.525 402.904 l
758.337 411.654 l
756.837 411.654 l
754.994 404.061 l
753.134 411.654 l
751.650 411.654 l
749.462 402.904 l
h
765.031 408.357 m
764.166 408.357 763.565 408.456 763.226 408.654  c
762.888 408.852 762.718 409.191 762.718 409.670  c
762.718 410.055 762.846 410.360 763.101 410.584  c
763.356 410.808 763.697 410.920 764.125 410.920  c
764.729 410.920 765.210 410.709 765.570 410.287  c
765.929 409.865 766.109 409.300 766.109 408.592  c
766.109 408.357 l
765.031 408.357 l
h
767.187 407.904 m
767.187 411.654 l
766.109 411.654 l
766.109 410.654 l
765.859 411.050 765.552 411.344 765.187 411.537  c
764.822 411.730 764.375 411.826 763.843 411.826  c
763.166 411.826 762.630 411.636 762.234 411.256  c
761.838 410.876 761.640 410.373 761.640 409.748  c
761.640 409.008 761.888 408.451 762.382 408.076  c
762.877 407.701 763.614 407.514 764.593 407.514  c
766.109 407.514 l
766.109 407.404 l
766.109 406.904 765.945 406.519 765.617 406.248  c
765.289 405.977 764.833 405.842 764.250 405.842  c
763.875 405.842 763.507 405.889 763.148 405.982  c
762.789 406.076 762.447 406.212 762.125 406.389  c
762.125 405.389 l
762.520 405.232 762.903 405.118 763.273 405.045  c
763.643 404.972 764.005 404.936 764.359 404.936  c
765.307 404.936 766.015 405.180 766.484 405.670  c
766.953 406.160 767.187 406.904 767.187 407.904  c
h
769.400 405.092 m
770.478 405.092 l
770.478 411.654 l
769.400 411.654 l
769.400 405.092 l
h
769.400 402.529 m
770.478 402.529 l
770.478 403.904 l
769.400 403.904 l
769.400 402.529 l
h
773.812 403.232 m
773.812 405.092 l
776.031 405.092 l
776.031 405.936 l
773.812 405.936 l
773.812 409.498 l
773.812 410.029 773.885 410.370 774.031 410.521  c
774.177 410.673 774.473 410.748 774.921 410.748  c
776.031 410.748 l
776.031 411.654 l
774.921 411.654 l
774.088 411.654 773.513 411.498 773.195 411.186  c
772.877 410.873 772.718 410.311 772.718 409.498  c
772.718 405.936 l
771.937 405.936 l
771.937 405.092 l
772.718 405.092 l
772.718 403.232 l
773.812 403.232 l
h
777.439 405.092 m
778.517 405.092 l
778.517 411.654 l
777.439 411.654 l
777.439 405.092 l
h
777.439 402.529 m
778.517 402.529 l
778.517 403.904 l
777.439 403.904 l
777.439 402.529 l
h
786.242 407.686 m
786.242 411.654 l
785.164 411.654 l
785.164 407.732 l
785.164 407.107 785.041 406.641 784.796 406.334  c
784.552 406.027 784.190 405.873 783.710 405.873  c
783.127 405.873 782.666 406.058 782.328 406.428  c
781.989 406.798 781.820 407.305 781.820 407.951  c
781.820 411.654 l
780.742 411.654 l
780.742 405.092 l
781.820 405.092 l
781.820 406.107 l
782.080 405.712 782.385 405.417 782.734 405.225  c
783.083 405.032 783.486 404.936 783.945 404.936  c
784.695 404.936 785.265 405.167 785.656 405.631  c
786.046 406.094 786.242 406.779 786.242 407.686  c
h
792.707 408.295 m
792.707 407.514 792.545 406.910 792.222 406.482  c
791.899 406.055 791.446 405.842 790.863 405.842  c
790.290 405.842 789.842 406.055 789.519 406.482  c
789.196 406.910 789.035 407.514 789.035 408.295  c
789.035 409.076 789.196 409.680 789.519 410.107  c
789.842 410.535 790.290 410.748 790.863 410.748  c
791.446 410.748 791.899 410.535 792.222 410.107  c
792.545 409.680 792.707 409.076 792.707 408.295  c
h
793.785 410.842 m
793.785 411.956 793.537 412.787 793.042 413.334  c
792.548 413.881 791.785 414.154 790.753 414.154  c
790.378 414.154 790.022 414.126 789.683 414.068  c
789.345 414.011 789.019 413.925 788.707 413.811  c
788.707 412.764 l
789.019 412.930 789.332 413.055 789.644 413.139  c
789.957 413.222 790.269 413.264 790.582 413.264  c
791.290 413.264 791.821 413.079 792.175 412.709  c
792.529 412.339 792.707 411.779 792.707 411.029  c
792.707 410.498 l
792.477 410.883 792.191 411.173 791.847 411.365  c
791.503 411.558 791.087 411.654 790.597 411.654  c
789.795 411.654 789.147 411.347 788.652 410.732  c
788.157 410.118 787.910 409.305 787.910 408.295  c
787.910 407.285 788.157 406.472 788.652 405.857  c
789.147 405.243 789.795 404.936 790.597 404.936  c
791.087 404.936 791.503 405.032 791.847 405.225  c
792.191 405.417 792.477 405.706 792.707 406.092  c
792.707 405.092 l
793.785 405.092 l
793.785 410.842 l
h
f
2 J
10.0000 M
Q
q
0 J
1.45000 M
newpath
736.969 407.500 m
736.969 407.500 l
736.969 426.827 752.636 442.495 771.963 442.495  c
771.963 442.495 l
791.290 442.495 806.958 426.827 806.958 407.500  c
806.958 407.500 l
806.958 388.173 791.290 372.505 771.963 372.505  c
771.963 372.505 l
752.636 372.505 736.969 388.173 736.969 407.500  c
h
S
2 J
10.0000 M
Q
q
1.00000 1.00000 1.00000 RG
newpath
604.000 407.500 m
604.000 407.500 l
604.000 428.763 621.237 446.000 642.500 446.000  c
642.500 446.000 l
663.763 446.000 681.000 428.763 681.000 407.500  c
681.000 407.500 l
681.000 386.237 663.763 369.000 642.500 369.000  c
642.500 369.000 l
621.237 369.000 604.000 386.237 604.000 407.500  c
h
f
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
604.000 407.500 m
604.000 407.500 l
604.000 428.763 621.237 446.000 642.500 446.000  c
642.500 446.000 l
663.763 446.000 681.000 428.763 681.000 407.500  c
681.000 407.500 l
681.000 386.237 663.763 369.000 642.500 369.000  c
642.500 369.000 l
621.237 369.000 604.000 386.237 604.000 407.500  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
627.263 403.576 m
627.263 404.826 l
626.856 404.451 626.429 404.173 625.981 403.990  c
625.534 403.808 625.054 403.717 624.544 403.717  c
623.544 403.717 622.778 404.024 622.247 404.639  c
621.716 405.253 621.450 406.139 621.450 407.295  c
621.450 408.441 621.716 409.321 622.247 409.936  c
622.778 410.550 623.544 410.857 624.544 410.857  c
625.054 410.857 625.534 410.764 625.981 410.576  c
626.429 410.389 626.856 410.113 627.263 409.748  c
627.263 410.982 l
626.846 411.264 626.406 411.475 625.942 411.615  c
625.479 411.756 624.992 411.826 624.481 411.826  c
623.148 411.826 622.101 411.420 621.341 410.607  c
620.580 409.795 620.200 408.691 620.200 407.295  c
620.200 405.889 620.580 404.779 621.341 403.967  c
622.101 403.154 623.148 402.748 624.481 402.748  c
625.002 402.748 625.494 402.818 625.958 402.959  c
626.422 403.100 626.856 403.305 627.263 403.576  c
h
634.501 407.686 m
634.501 411.654 l
633.423 411.654 l
633.423 407.732 l
633.423 407.107 633.300 406.641 633.056 406.334  c
632.811 406.027 632.449 405.873 631.970 405.873  c
631.386 405.873 630.925 406.058 630.587 406.428  c
630.248 406.798 630.079 407.305 630.079 407.951  c
630.079 411.654 l
629.001 411.654 l
629.001 402.529 l
630.079 402.529 l
630.079 406.107 l
630.340 405.712 630.644 405.417 630.993 405.225  c
631.342 405.032 631.746 404.936 632.204 404.936  c
632.954 404.936 633.524 405.167 633.915 405.631  c
634.306 406.094 634.501 406.779 634.501 407.686  c
h
639.622 408.357 m
638.757 408.357 638.156 408.456 637.817 408.654  c
637.479 408.852 637.310 409.191 637.310 409.670  c
637.310 410.055 637.437 410.360 637.692 410.584  c
637.948 410.808 638.289 410.920 638.716 410.920  c
639.320 410.920 639.802 410.709 640.161 410.287  c
640.521 409.865 640.700 409.300 640.700 408.592  c
640.700 408.357 l
639.622 408.357 l
h
641.778 407.904 m
641.778 411.654 l
640.700 411.654 l
640.700 410.654 l
640.450 411.050 640.143 411.344 639.778 411.537  c
639.414 411.730 638.966 411.826 638.435 411.826  c
637.757 411.826 637.221 411.636 636.825 411.256  c
636.429 410.876 636.231 410.373 636.231 409.748  c
636.231 409.008 636.479 408.451 636.974 408.076  c
637.468 407.701 638.205 407.514 639.185 407.514  c
640.700 407.514 l
640.700 407.404 l
640.700 406.904 640.536 406.519 640.208 406.248  c
639.880 405.977 639.424 405.842 638.841 405.842  c
638.466 405.842 638.099 405.889 637.739 405.982  c
637.380 406.076 637.039 406.212 636.716 406.389  c
636.716 405.389 l
637.112 405.232 637.494 405.118 637.864 405.045  c
638.234 404.972 638.596 404.936 638.950 404.936  c
639.898 404.936 640.606 405.180 641.075 405.670  c
641.544 406.160 641.778 406.904 641.778 407.904  c
h
649.460 407.686 m
649.460 411.654 l
648.382 411.654 l
648.382 407.732 l
648.382 407.107 648.259 406.641 648.015 406.334  c
647.770 406.027 647.408 405.873 646.929 405.873  c
646.345 405.873 645.884 406.058 645.546 406.428  c
645.207 406.798 645.038 407.305 645.038 407.951  c
645.038 411.654 l
643.960 411.654 l
643.960 405.092 l
645.038 405.092 l
645.038 406.107 l
645.299 405.712 645.603 405.417 645.952 405.225  c
646.301 405.032 646.705 404.936 647.163 404.936  c
647.913 404.936 648.483 405.167 648.874 405.631  c
649.265 406.094 649.460 406.779 649.460 407.686  c
h
655.925 408.295 m
655.925 407.514 655.763 406.910 655.440 406.482  c
655.118 406.055 654.664 405.842 654.081 405.842  c
653.508 405.842 653.060 406.055 652.737 406.482  c
652.414 406.910 652.253 407.514 652.253 408.295  c
652.253 409.076 652.414 409.680 652.737 410.107  c
653.060 410.535 653.508 410.748 654.081 410.748  c
654.664 410.748 655.118 410.535 655.440 410.107  c
655.763 409.680 655.925 409.076 655.925 408.295  c
h
657.003 410.842 m
657.003 411.956 656.756 412.787 656.261 413.334  c
655.766 413.881 655.003 414.154 653.972 414.154  c
653.597 414.154 653.240 414.126 652.901 414.068  c
652.563 414.011 652.237 413.925 651.925 413.811  c
651.925 412.764 l
652.237 412.930 652.550 413.055 652.862 413.139  c
653.175 413.222 653.487 413.264 653.800 413.264  c
654.508 413.264 655.039 413.079 655.394 412.709  c
655.748 412.339 655.925 411.779 655.925 411.029  c
655.925 410.498 l
655.696 410.883 655.409 411.173 655.065 411.365  c
654.722 411.558 654.305 411.654 653.815 411.654  c
653.013 411.654 652.365 411.347 651.870 410.732  c
651.375 410.118 651.128 409.305 651.128 408.295  c
651.128 407.285 651.375 406.472 651.870 405.857  c
652.365 405.243 653.013 404.936 653.815 404.936  c
654.305 404.936 654.722 405.032 655.065 405.225  c
655.409 405.417 655.696 405.706 655.925 406.092  c
655.925 405.092 l
657.003 405.092 l
657.003 410.842 l
h
664.839 408.107 m
664.839 408.623 l
659.870 408.623 l
659.922 409.373 660.149 409.941 660.550 410.326  c
660.951 410.712 661.506 410.904 662.214 410.904  c
662.631 410.904 663.034 410.855 663.425 410.756  c
663.815 410.657 664.203 410.503 664.589 410.295  c
664.589 411.326 l
664.193 411.482 663.792 411.605 663.386 411.693  c
662.979 411.782 662.568 411.826 662.151 411.826  c
661.110 411.826 660.282 411.521 659.667 410.912  c
659.052 410.303 658.745 409.477 658.745 408.436  c
658.745 407.363 659.037 406.511 659.620 405.881  c
660.203 405.251 660.985 404.936 661.964 404.936  c
662.849 404.936 663.550 405.219 664.065 405.787  c
664.581 406.355 664.839 407.128 664.839 408.107  c
h
663.761 407.779 m
663.750 407.196 663.584 406.727 663.261 406.373  c
662.938 406.019 662.511 405.842 661.979 405.842  c
661.375 405.842 660.894 406.014 660.534 406.357  c
660.175 406.701 659.969 407.180 659.917 407.795  c
663.761 407.779 l
h
f
2 J
10.0000 M
Q
q
1.00000 1.00000 1.00000 RG
newpath
604.000 525.500 m
604.000 525.500 l
604.000 546.763 621.237 564.000 642.500 564.000  c
642.500 564.000 l
663.763 564.000 681.000 546.763 681.000 525.500  c
681.000 525.500 l
681.000 504.237 663.763 487.000 642.500 487.000  c
642.500 487.000 l
621.237 487.000 604.000 504.237 604.000 525.500  c
h
f
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
604.000 525.500 m
604.000 525.500 l
604.000 546.763 621.237 564.000 642.500 564.000  c
642.500 564.000 l
663.763 564.000 681.000 546.763 681.000 525.500  c
681.000 525.500 l
681.000 504.237 663.763 487.000 642.500 487.000  c
642.500 487.000 l
621.237 487.000 604.000 504.237 604.000 525.500  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
621.499 525.545 m
621.749 525.639 621.994 525.826 622.233 526.107  c
622.473 526.389 622.718 526.774 622.968 527.264  c
624.171 529.654 l
622.890 529.654 l
621.780 527.404 l
621.489 526.821 621.207 526.433 620.937 526.240  c
620.666 526.048 620.296 525.951 619.827 525.951  c
618.530 525.951 l
618.530 529.654 l
617.343 529.654 l
617.343 520.904 l
620.015 520.904 l
621.015 520.904 621.762 521.113 622.257 521.529  c
622.752 521.946 622.999 522.576 622.999 523.420  c
622.999 523.972 622.871 524.430 622.616 524.795  c
622.361 525.160 621.989 525.410 621.499 525.545  c
h
618.530 521.873 m
618.530 524.982 l
620.015 524.982 l
620.588 524.982 621.020 524.850 621.312 524.584  c
621.603 524.318 621.749 523.930 621.749 523.420  c
621.749 522.910 621.603 522.524 621.312 522.264  c
621.020 522.003 620.588 521.873 620.015 521.873  c
618.530 521.873 l
h
631.259 526.107 m
631.259 526.623 l
626.290 526.623 l
626.342 527.373 626.569 527.941 626.970 528.326  c
627.371 528.712 627.925 528.904 628.634 528.904  c
629.050 528.904 629.454 528.855 629.845 528.756  c
630.235 528.657 630.623 528.503 631.009 528.295  c
631.009 529.326 l
630.613 529.482 630.212 529.605 629.806 529.693  c
629.399 529.782 628.988 529.826 628.571 529.826  c
627.530 529.826 626.701 529.521 626.087 528.912  c
625.472 528.303 625.165 527.477 625.165 526.436  c
625.165 525.363 625.457 524.511 626.040 523.881  c
626.623 523.251 627.405 522.936 628.384 522.936  c
629.269 522.936 629.970 523.219 630.485 523.787  c
631.001 524.355 631.259 525.128 631.259 526.107  c
h
630.181 525.779 m
630.170 525.196 630.004 524.727 629.681 524.373  c
629.358 524.019 628.931 523.842 628.399 523.842  c
627.795 523.842 627.313 524.014 626.954 524.357  c
626.595 524.701 626.389 525.180 626.337 525.795  c
630.181 525.779 l
h
636.001 526.357 m
635.136 526.357 634.535 526.456 634.196 526.654  c
633.858 526.852 633.688 527.191 633.688 527.670  c
633.688 528.055 633.816 528.360 634.071 528.584  c
634.326 528.808 634.668 528.920 635.095 528.920  c
635.699 528.920 636.181 528.709 636.540 528.287  c
636.899 527.865 637.079 527.300 637.079 526.592  c
637.079 526.357 l
636.001 526.357 l
h
638.157 525.904 m
638.157 529.654 l
637.079 529.654 l
637.079 528.654 l
636.829 529.050 636.522 529.344 636.157 529.537  c
635.793 529.730 635.345 529.826 634.813 529.826  c
634.136 529.826 633.600 529.636 633.204 529.256  c
632.808 528.876 632.610 528.373 632.610 527.748  c
632.610 527.008 632.858 526.451 633.353 526.076  c
633.847 525.701 634.584 525.514 635.563 525.514  c
637.079 525.514 l
637.079 525.404 l
637.079 524.904 636.915 524.519 636.587 524.248  c
636.259 523.977 635.803 523.842 635.220 523.842  c
634.845 523.842 634.478 523.889 634.118 523.982  c
633.759 524.076 633.418 524.212 633.095 524.389  c
633.095 523.389 l
633.491 523.232 633.873 523.118 634.243 523.045  c
634.613 522.972 634.975 522.936 635.329 522.936  c
636.277 522.936 636.985 523.180 637.454 523.670  c
637.923 524.160 638.157 524.904 638.157 525.904  c
h
645.104 523.342 m
645.104 524.357 l
644.792 524.180 644.485 524.050 644.183 523.967  c
643.881 523.883 643.573 523.842 643.261 523.842  c
642.552 523.842 642.006 524.063 641.620 524.506  c
641.235 524.949 641.042 525.571 641.042 526.373  c
641.042 527.175 641.235 527.798 641.620 528.240  c
642.006 528.683 642.552 528.904 643.261 528.904  c
643.573 528.904 643.881 528.863 644.183 528.779  c
644.485 528.696 644.792 528.571 645.104 528.404  c
645.104 529.404 l
644.802 529.540 644.490 529.644 644.167 529.717  c
643.844 529.790 643.500 529.826 643.136 529.826  c
642.146 529.826 641.360 529.516 640.776 528.896  c
640.193 528.277 639.901 527.436 639.901 526.373  c
639.901 525.311 640.196 524.472 640.784 523.857  c
641.373 523.243 642.183 522.936 643.214 522.936  c
643.537 522.936 643.857 522.969 644.175 523.037  c
644.493 523.105 644.802 523.206 645.104 523.342  c
h
648.046 521.232 m
648.046 523.092 l
650.265 523.092 l
650.265 523.936 l
648.046 523.936 l
648.046 527.498 l
648.046 528.029 648.119 528.370 648.265 528.521  c
648.410 528.673 648.707 528.748 649.155 528.748  c
650.265 528.748 l
650.265 529.654 l
649.155 529.654 l
648.322 529.654 647.746 529.498 647.429 529.186  c
647.111 528.873 646.952 528.311 646.952 527.498  c
646.952 523.936 l
646.171 523.936 l
646.171 523.092 l
646.952 523.092 l
646.952 521.232 l
648.046 521.232 l
h
651.673 523.092 m
652.751 523.092 l
652.751 529.654 l
651.673 529.654 l
651.673 523.092 l
h
651.673 520.529 m
652.751 520.529 l
652.751 521.904 l
651.673 521.904 l
651.673 520.529 l
h
657.554 523.842 m
656.981 523.842 656.525 524.068 656.187 524.521  c
655.848 524.975 655.679 525.592 655.679 526.373  c
655.679 527.165 655.845 527.785 656.179 528.232  c
656.512 528.680 656.970 528.904 657.554 528.904  c
658.127 528.904 658.582 528.678 658.921 528.225  c
659.259 527.771 659.429 527.154 659.429 526.373  c
659.429 525.602 659.259 524.988 658.921 524.529  c
658.582 524.071 658.127 523.842 657.554 523.842  c
h
657.554 522.936 m
658.491 522.936 659.228 523.240 659.765 523.850  c
660.301 524.459 660.569 525.300 660.569 526.373  c
660.569 527.446 660.301 528.290 659.765 528.904  c
659.228 529.519 658.491 529.826 657.554 529.826  c
656.616 529.826 655.879 529.519 655.343 528.904  c
654.806 528.290 654.538 527.446 654.538 526.373  c
654.538 525.300 654.806 524.459 655.343 523.850  c
655.879 523.240 656.616 522.936 657.554 522.936  c
h
667.817 525.686 m
667.817 529.654 l
666.739 529.654 l
666.739 525.732 l
666.739 525.107 666.617 524.641 666.372 524.334  c
666.127 524.027 665.765 523.873 665.286 523.873  c
664.703 523.873 664.242 524.058 663.903 524.428  c
663.565 524.798 663.396 525.305 663.396 525.951  c
663.396 529.654 l
662.317 529.654 l
662.317 523.092 l
663.396 523.092 l
663.396 524.107 l
663.656 523.712 663.961 523.417 664.310 523.225  c
664.659 523.032 665.062 522.936 665.521 522.936  c
666.271 522.936 666.841 523.167 667.231 523.631  c
667.622 524.094 667.817 524.779 667.817 525.686  c
h
f
2 J
10.0000 M
Q
q
1.00000 1.00000 1.00000 RG
newpath
733.463 525.500 m
733.463 525.500 l
733.463 546.763 750.700 564.000 771.963 564.000  c
771.963 564.000 l
793.226 564.000 810.463 546.763 810.463 525.500  c
810.463 525.500 l
810.463 504.237 793.226 487.000 771.963 487.000  c
771.963 487.000 l
750.700 487.000 733.463 504.237 733.463 525.500  c
h
f
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
733.463 525.500 m
733.463 525.500 l
733.463 546.763 750.700 564.000 771.963 564.000  c
771.963 564.000 l
793.226 564.000 810.463 546.763 810.463 525.500  c
810.463 525.500 l
810.463 504.237 793.226 487.000 771.963 487.000  c
771.963 487.000 l
750.700 487.000 733.463 504.237 733.463 525.500  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
744.234 520.904 m
749.265 520.904 l
749.265 521.904 l
745.421 521.904 l
745.421 524.482 l
748.890 524.482 l
748.890 525.482 l
745.421 525.482 l
745.421 529.654 l
744.234 529.654 l
744.234 520.904 l
h
756.714 526.107 m
756.714 526.623 l
751.746 526.623 l
751.798 527.373 752.024 527.941 752.425 528.326  c
752.826 528.712 753.381 528.904 754.089 528.904  c
754.506 528.904 754.910 528.855 755.300 528.756  c
755.691 528.657 756.079 528.503 756.464 528.295  c
756.464 529.326 l
756.069 529.482 755.667 529.605 755.261 529.693  c
754.855 529.782 754.444 529.826 754.027 529.826  c
752.985 529.826 752.157 529.521 751.542 528.912  c
750.928 528.303 750.621 527.477 750.621 526.436  c
750.621 525.363 750.912 524.511 751.496 523.881  c
752.079 523.251 752.860 522.936 753.839 522.936  c
754.725 522.936 755.425 523.219 755.941 523.787  c
756.457 524.355 756.714 525.128 756.714 526.107  c
h
755.636 525.779 m
755.626 525.196 755.459 524.727 755.136 524.373  c
754.813 524.019 754.386 523.842 753.855 523.842  c
753.251 523.842 752.769 524.014 752.410 524.357  c
752.050 524.701 751.845 525.180 751.792 525.795  c
755.636 525.779 l
h
764.097 526.107 m
764.097 526.623 l
759.128 526.623 l
759.181 527.373 759.407 527.941 759.808 528.326  c
760.209 528.712 760.764 528.904 761.472 528.904  c
761.889 528.904 762.292 528.855 762.683 528.756  c
763.074 528.657 763.462 528.503 763.847 528.295  c
763.847 529.326 l
763.451 529.482 763.050 529.605 762.644 529.693  c
762.238 529.782 761.826 529.826 761.410 529.826  c
760.368 529.826 759.540 529.521 758.925 528.912  c
758.311 528.303 758.003 527.477 758.003 526.436  c
758.003 525.363 758.295 524.511 758.878 523.881  c
759.462 523.251 760.243 522.936 761.222 522.936  c
762.108 522.936 762.808 523.219 763.324 523.787  c
763.839 524.355 764.097 525.128 764.097 526.107  c
h
763.019 525.779 m
763.009 525.196 762.842 524.727 762.519 524.373  c
762.196 524.019 761.769 523.842 761.238 523.842  c
760.634 523.842 760.152 524.014 759.792 524.357  c
759.433 524.701 759.227 525.180 759.175 525.795  c
763.019 525.779 l
h
770.183 524.092 m
770.183 520.529 l
771.261 520.529 l
771.261 529.654 l
770.183 529.654 l
770.183 528.670 l
769.954 529.055 769.667 529.344 769.324 529.537  c
768.980 529.730 768.563 529.826 768.074 529.826  c
767.282 529.826 766.636 529.508 766.136 528.873  c
765.636 528.238 765.386 527.404 765.386 526.373  c
765.386 525.342 765.636 524.511 766.136 523.881  c
766.636 523.251 767.282 522.936 768.074 522.936  c
768.563 522.936 768.980 523.029 769.324 523.217  c
769.667 523.404 769.954 523.696 770.183 524.092  c
h
766.511 526.373 m
766.511 527.165 766.673 527.787 766.996 528.240  c
767.319 528.693 767.766 528.920 768.339 528.920  c
768.912 528.920 769.363 528.693 769.691 528.240  c
770.019 527.787 770.183 527.165 770.183 526.373  c
770.183 525.581 770.019 524.962 769.691 524.514  c
769.363 524.066 768.912 523.842 768.339 523.842  c
767.766 523.842 767.319 524.066 766.996 524.514  c
766.673 524.962 766.511 525.581 766.511 526.373  c
h
778.191 526.373 m
778.191 525.581 778.027 524.962 777.699 524.514  c
777.371 524.066 776.925 523.842 776.363 523.842  c
775.790 523.842 775.339 524.066 775.011 524.514  c
774.683 524.962 774.519 525.581 774.519 526.373  c
774.519 527.165 774.683 527.787 775.011 528.240  c
775.339 528.693 775.790 528.920 776.363 528.920  c
776.925 528.920 777.371 528.693 777.699 528.240  c
778.027 527.787 778.191 527.165 778.191 526.373  c
h
774.519 524.092 m
774.748 523.696 775.035 523.404 775.378 523.217  c
775.722 523.029 776.134 522.936 776.613 522.936  c
777.415 522.936 778.066 523.251 778.566 523.881  c
779.066 524.511 779.316 525.342 779.316 526.373  c
779.316 527.404 779.066 528.238 778.566 528.873  c
778.066 529.508 777.415 529.826 776.613 529.826  c
776.134 529.826 775.722 529.730 775.378 529.537  c
775.035 529.344 774.748 529.055 774.519 528.670  c
774.519 529.654 l
773.441 529.654 l
773.441 520.529 l
774.519 520.529 l
774.519 524.092 l
h
784.074 526.357 m
783.209 526.357 782.608 526.456 782.269 526.654  c
781.931 526.852 781.761 527.191 781.761 527.670  c
781.761 528.055 781.889 528.360 782.144 528.584  c
782.399 528.808 782.740 528.920 783.167 528.920  c
783.772 528.920 784.253 528.709 784.613 528.287  c
784.972 527.865 785.152 527.300 785.152 526.592  c
785.152 526.357 l
784.074 526.357 l
h
786.230 525.904 m
786.230 529.654 l
785.152 529.654 l
785.152 528.654 l
784.902 529.050 784.595 529.344 784.230 529.537  c
783.865 529.730 783.417 529.826 782.886 529.826  c
782.209 529.826 781.673 529.636 781.277 529.256  c
780.881 528.876 780.683 528.373 780.683 527.748  c
780.683 527.008 780.931 526.451 781.425 526.076  c
781.920 525.701 782.657 525.514 783.636 525.514  c
785.152 525.514 l
785.152 525.404 l
785.152 524.904 784.988 524.519 784.660 524.248  c
784.332 523.977 783.876 523.842 783.292 523.842  c
782.917 523.842 782.550 523.889 782.191 523.982  c
781.832 524.076 781.490 524.212 781.167 524.389  c
781.167 523.389 l
781.563 523.232 781.946 523.118 782.316 523.045  c
782.686 522.972 783.048 522.936 783.402 522.936  c
784.350 522.936 785.058 523.180 785.527 523.670  c
785.996 524.160 786.230 524.904 786.230 525.904  c
h
793.177 523.342 m
793.177 524.357 l
792.865 524.180 792.557 524.050 792.255 523.967  c
791.953 523.883 791.646 523.842 791.333 523.842  c
790.625 523.842 790.078 524.063 789.693 524.506  c
789.307 524.949 789.115 525.571 789.115 526.373  c
789.115 527.175 789.307 527.798 789.693 528.240  c
790.078 528.683 790.625 528.904 791.333 528.904  c
791.646 528.904 791.953 528.863 792.255 528.779  c
792.557 528.696 792.865 528.571 793.177 528.404  c
793.177 529.404 l
792.875 529.540 792.563 529.644 792.240 529.717  c
791.917 529.790 791.573 529.826 791.208 529.826  c
790.219 529.826 789.432 529.516 788.849 528.896  c
788.266 528.277 787.974 527.436 787.974 526.373  c
787.974 525.311 788.268 524.472 788.857 523.857  c
789.445 523.243 790.255 522.936 791.287 522.936  c
791.610 522.936 791.930 522.969 792.248 523.037  c
792.565 523.105 792.875 523.206 793.177 523.342  c
h
795.009 520.529 m
796.087 520.529 l
796.087 525.920 l
799.306 523.092 l
800.681 523.092 l
797.197 526.154 l
800.837 529.654 l
799.431 529.654 l
796.087 526.451 l
796.087 529.654 l
795.009 529.654 l
795.009 520.529 l
h
f
2 J
10.0000 M
Q
0 J
1.45000 M
newpath
733.434 407.500 m
688.996 407.500 l
S
newpath
680.996 407.500 m
692.996 412.500 l
689.996 407.500 l
692.996 402.500 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
642.500 446.017 m
642.500 478.962 l
S
newpath
642.500 486.962 m
647.500 474.962 l
642.500 477.962 l
637.500 474.962 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
857.179 350.282 m
810.582 381.570 l
S
newpath
803.940 386.029 m
816.690 383.491 l
811.412 381.012 l
811.116 375.189 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
681.029 525.500 m
725.467 525.500 l
S
newpath
733.467 525.500 m
721.467 520.500 l
724.467 525.500 l
721.467 530.500 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
771.963 486.983 m
771.963 454.038 l
S
newpath
771.963 446.038 m
766.963 458.038 l
771.963 455.038 l
776.963 458.038 l
h
f
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
